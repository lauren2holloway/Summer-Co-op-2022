#include <SPI.h>
#include <Servo.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "Zanshin_BME680.h"
#include <LIDARLite.h>
#include "SparkFun_AS7265X.h"
#include "HX711.h"

//DISPLAY STUFF
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32

//load cell stuff
#define calibration_factor -7050.0
#define DOUT 2
#define CLK 4

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
Servo myservo;
BME680_Class BME680;
LIDARLite lidarLite;
AS7265X specSensor;
HX711 scale;

//VARIABLES
const int buttonPin = 3;
int count = 0;
unsigned long button_time = 0;
unsigned long last_button_time = 0;
const int currentPin = A0;
const int avgCurrSamples = 10;
int currentSensorValue  = 0;
float sensitivity = 2.525893408; //100mA per 500mV = 0.2
float Vref = -6399.991632; // Output voltage with no current: ~ 2500mV or 2.5V
int cal_cnt = 0;

//function declarations
float altitude(const int32_t press, const float seaLevel = 1013.25);
void climateSensor();
void currentSensor();
void LIDAR();
void spectroscopy();
void loadCell();

//function definitions
float altitude(const int32_t press, const float seaLevel) {
  static float Altitude;
  Altitude =
      44330.0 * (1.0 - pow(((float)press / 100.0) / seaLevel, 0.1903));  // Convert into meters
  return (Altitude);
}

void climateSensor(){
  static int32_t  temp, humidity, pressure, gas;  // BME readings
  static char     buf[16];                        // sprintf text buffer
  static float    alt;                            // Temporary variable
//  static uint16_t loopCounter = 0;                // Display iterations
  display.clearDisplay();
  display.setCursor(0,0);
  display.println("Climate Sensor");

  BME680.getSensorData(temp, humidity, pressure, gas);  // Get readings

  sprintf(buf, "%3d.%02d",(int8_t)(temp / 100), (uint8_t)(temp % 100));   // Temp in decidegrees
  display.print("Temp:");
  display.print(buf);
  display.println(" deg C");
  sprintf(buf, "%3d.%03d", (int8_t)(humidity / 1000),(uint16_t)(humidity % 1000));  // Humidity milli-pct
  display.print("Humidity:");
  display.print(buf);
  display.println(" mPct");
  sprintf(buf, "%7d.%02d", (int16_t)(pressure / 100),(uint8_t)(pressure % 100));  // Pressure Pascals
  display.print("Pressure:");
  display.print(buf);
  display.println("Pa");
//  alt = altitude(pressure);                                                // temp altitude
//  sprintf(buf, "%5d.%02d", (int16_t)(alt), ((uint8_t)(alt * 100) % 100));  // Altitude meters
//  display.print("Altitude:");
//  display.print(buf);
//  display.println(" m");
  sprintf(buf, "%4d.%02d", (int16_t)(gas / 100), (uint8_t)(gas % 100));  // Resistance milliohms
  display.print("C02:");
  display.print(buf);
  display.println(" mOhm");
  display.display();

  if(temp < 2800){
    myservo.write(0);
    delay(1000);
  }else{
    myservo.write(180);
    delay(1000);
  }
}

void currentSensor() {
  display.clearDisplay();
  display.setCursor(0,0);
  display.println("Current Sensor");
  for (int i = 0; i < avgCurrSamples; i++)
  {
    currentSensorValue += analogRead(currentPin);
    delay(2);
  }
   currentSensorValue = currentSensorValue / avgCurrSamples;
   float voltage = 4.88 * currentSensorValue;
   float current = (voltage * sensitivity) + Vref;
   display.print(current);
   display.print("mA");
   display.display();
   if (current > 2000){
    myservo.write(180);
   }else{
    myservo.write(0);
   }
}

void LIDAR(){
  display.clearDisplay();
  display.setCursor(0,0);
  display.println("LIDAR");
  int dist;
  if ( cal_cnt == 0 ) {
    dist = lidarLite.distance();      // With bias correction
  } else {
    dist = lidarLite.distance(false); // Without bias correction
  }
  cal_cnt++;
  cal_cnt = cal_cnt % 100;
  display.print(dist);
  display.print(" cm");
  display.display();

  myservo.write(dist * 180/30);
  delay(100);
}

void spectroscopy(){
  display.clearDisplay();
  display.setCursor(0,0);
  display.println("Spectroscopy");
  specSensor.takeMeasurements(); //This is a hard wait while all 18 channels are measured
  display.println(specSensor.getCalibratedR());
  if(specSensor.getCalibratedR()>500){
    myservo.write(180);
    display.print("not red");
  }else if(specSensor.getCalibratedR()<50){
    myservo.write(180);
    display.print("not red");
  }else{
    myservo.write(0);
    display.print("RED");
  }
  display.display();
  delay(50);
}

void loadCell(){
  display.clearDisplay();
  display.setCursor(0,0);
  display.println("Load Cell");
  float weight = scale.get_units();
  display.print(weight, 1);
  display.print(" lbs");
  display.display();
  myservo.write(weight * 180/20);
}
void setup() {
  myservo.attach(5);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.display();
  delay(2000);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);

  pinMode(buttonPin, INPUT);

  attachInterrupt(digitalPinToInterrupt(buttonPin), button_ISR, RISING);

  //climate setup
  while (!BME680.begin(I2C_STANDARD_MODE)) {  // Start BME680 using I2C, use first device found
    delay(5000);
  }
  BME680.setOversampling(TemperatureSensor, Oversample16);
  BME680.setOversampling(HumiditySensor, Oversample16);
  BME680.setOversampling(PressureSensor, Oversample16);
  BME680.setIIRFilter(IIR4);  // Use enumerated type values
  BME680.setGas(320, 150);  // 320ï¿½c for 150 milliseconds

  //LIDAR setup
  lidarLite.begin(0, true);
  lidarLite.configure(0);

  //Spectroscopy setup
  specSensor.begin();
  specSensor.disableIndicator();

  //loadcell setup
  scale.begin(DOUT, CLK);
  scale.set_scale(calibration_factor); //This value is obtained by using the SparkFun_HX711_Calibration sketch
  scale.tare();
}

void loop() {
  display.clearDisplay();
  display.setCursor(0,0);
  if (count == 0){
    loadCell();
  }else if (count == 1){
    currentSensor();
  }else if (count == 2){
    LIDAR();
  }else if (count == 3){
    climateSensor();
  }else{
    spectroscopy();
  }
    display.display();
    delay(50);
}

//interrupt handler
void button_ISR(){
  button_time = millis();
  if (button_time - last_button_time > 250){
    count++;
    if (count > 4){
      count = 0;
    }
    
    last_button_time = button_time;
  }
  }
